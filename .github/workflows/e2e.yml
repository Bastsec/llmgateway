name: e2e
on:
  workflow_dispatch:
  pull_request:
    paths:
      - "apps/gateway/**"
      - "packages/models/**"
      - "**/*.e2e.ts"
      - ".github/workflows/e2e.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e-shards:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && github.event.pull_request.head.repo.full_name == github.repository }}
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Collect versions
        run: |
          echo "nodejs_version=$(cat .tool-versions | grep 'nodejs' | cut -d ' ' -f 2)" >> "$GITHUB_ENV"
          echo "pnpm_version=$(cat .tool-versions | grep 'pnpm' | cut -d ' ' -f 2)" >> "$GITHUB_ENV"

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.pnpm_version }}

      - uses: actions/setup-node@v6
        with:
          node-version: ${{ env.nodejs_version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup and run e2e shard ${{ matrix.shard }}
        run: |
          set -eux
          pnpm run setup
          export DATABASE_URL=postgres://postgres:pw@localhost:5432/test
          E2E_TEST=true pnpm vitest run -c vitest/vitest.e2e.config.mts --no-file-parallelism --shard=${{ matrix.shard }}/5 --reporter=blob --outputFile=e2e-results-${{ matrix.shard }}.blob || true
        env:
          LLM_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          LLM_INFERENCE_NET_API_KEY: ${{ secrets.INFERENCE_NET_API_KEY }}
          LLM_TOGETHER_AI_API_KEY: ${{ secrets.TOGETHER_AI_API_KEY }}
          LLM_GOOGLE_AI_STUDIO_API_KEY: ${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}
          LLM_CLOUD_RIFT_API_KEY: ${{ secrets.CLOUD_RIFT_API_KEY }}
          LLM_MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          LLM_X_AI_API_KEY: ${{ secrets.X_AI_API_KEY }}
          LLM_GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          LLM_DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          LLM_PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          LLM_NOVITA_AI_API_KEY: ${{ secrets.NOVITA_AI_API_KEY }}
          LLM_MOONSHOT_API_KEY: ${{ secrets.MOONSHOT_API_KEY }}
          LLM_ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
          LLM_NEBIUS_API_KEY: ${{ secrets.NEBIUS_API_KEY }}
          LLM_Z_AI_API_KEY: ${{ secrets.Z_AI_API_KEY }}
          LLM_NANO_GPT_API_KEY: ${{ secrets.NANO_GPT_API_KEY }}
          LLM_ROUTEWAY_API_KEY: ${{ secrets.ROUTEWAY_API_KEY }}
          LLM_ROUTEWAY_DISCOUNT_API_KEY: ${{ secrets.ROUTEWAY_DISCOUNT_API_KEY }}
          LLM_ROUTEWAY_DISCOUNT_BASE_URL: ${{ secrets.ROUTEWAY_DISCOUNT_BASE_URL }}
          LLM_AWS_BEDROCK_API_KEY: ${{ secrets.AWS_BEDROCK_API_KEY }}
          LLM_CANOPY_WAVE_API_KEY: ${{ secrets.CANOPY_WAVE_API_KEY }}

      - name: Upload shard results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.shard }}
          path: e2e-results-${{ matrix.shard }}.blob
          retention-days: 1
          if-no-files-found: ignore

  e2e:
    runs-on: ubuntu-latest
    needs: e2e-shards
    if: always() && github.actor != 'dependabot[bot]' && github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Collect versions
        run: |
          echo "nodejs_version=$(cat .tool-versions | grep 'nodejs' | cut -d ' ' -f 2)" >> "$GITHUB_ENV"
          echo "pnpm_version=$(cat .tool-versions | grep 'pnpm' | cut -d ' ' -f 2)" >> "$GITHUB_ENV"

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.pnpm_version }}

      - uses: actions/setup-node@v6
        with:
          node-version: ${{ env.nodejs_version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download all shard results
        uses: actions/download-artifact@v5
        with:
          path: ./e2e-results
          pattern: e2e-results-*

      - name: Merge reports and show final results
        run: |
          # Create .vitest-reports directory and move blob files there
          mkdir -p .vitest-reports
          find ./e2e-results -name "*.blob" -exec mv {} .vitest-reports/ \;
          # Merge reports - this will fail if tests failed, providing the final status
          pnpm vitest run -c vitest/vitest.e2e.config.mts --merge-reports
